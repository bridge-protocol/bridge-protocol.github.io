(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{131:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return p})),r.d(t,"default",(function(){return o}));var a=r(1),n=r(6),s=(r(0),r(164)),i={id:"sdk-services-claim",title:"Claim",sidebar_label:"Claim"},l={id:"sdk-services-claim",title:"Claim",description:"Service used to retrieve the Bridge Network known claim types\r",source:"@site/docs\\sdk-services-claim.md",permalink:"/docs/sdk-services-claim",sidebar_label:"Claim",sidebar:"gettingStarted",previous:{title:"Bridge",permalink:"/docs/sdk-services-bridge"},next:{title:"Partner",permalink:"/docs/sdk-services-partner"}},p=[{value:"Functions",id:"functions",children:[{value:"getAllTypes()",id:"getalltypes",children:[]},{value:"getType()",id:"gettype",children:[]},{value:"getClaimPublishList()",id:"getclaimpublishlist",children:[]},{value:"getPendingClaimPublishList()",id:"getpendingclaimpublishlist",children:[]},{value:"getClaimPublish()",id:"getclaimpublish",children:[]},{value:"createClaimPublish()",id:"createclaimpublish",children:[]},{value:"updateClaimPaymentTransaction()",id:"updateclaimpaymenttransaction",children:[]},{value:"getClaimPublishTransaction()",id:"getclaimpublishtransaction",children:[]},{value:"retry()",id:"retry",children:[]}]}],c={rightToc:p};function o(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Service used to retrieve the Bridge Network known claim types"),Object(s.b)("h2",{id:"functions"},"Functions"),Object(s.b)("h3",{id:"getalltypes"},"getAllTypes()"),Object(s.b)("p",null,"Retrieve all the known defined claim types for the Bridge Network"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async getAllTypes(useApi, passport, passphrase)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"useApi")," (bool) - whether or not to use the local constants or retrieve from Bridge Network API"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication, only required if useApi=true"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key, only required if useApi=true")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"gettype"},"getType()"),Object(s.b)("p",null,"Retrieve the specified known claim type definition"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async getType(claimTypeId, useApi, passport, passphrase)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"claimTypeId")," (string) - the claim type definition to retrieve"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"useApi")," (bool) - whether or not to use the local constants or retrieve from Bridge Network API"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication, only required if useApi=true"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key, only required if useApi=true")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"getclaimpublishlist"},"getClaimPublishList()"),Object(s.b)("p",null,"Gets a list of all claim publishing requests for the passport"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async getClaimPublishList(passport, passphrase)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"getpendingclaimpublishlist"},"getPendingClaimPublishList()"),Object(s.b)("p",null,"Gets a list of all pending claim publishing requests for the passport"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async getPendingClaimPublishList(passport, passphrase)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"getclaimpublish"},"getClaimPublish()"),Object(s.b)("p",null,"Gets the details of a specific claim publish request"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async getClaimPublish(passport, passphrase, id)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"id")," (string) - the identifier of the claim publish request to retrieve the details for")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"createclaimpublish"},"createClaimPublish()"),Object(s.b)("p",null,"Create a new claim publish request for the passport"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async createClaimPublish(passport, passphrase, network, address, claim)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network the claim will be published on"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"address")," (string) - the bloockchain address the claim will be published for"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"claim")," (",Object(s.b)("a",{href:"sdk-models-claim"},"Claim"),") - the claim to be published")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"updateclaimpaymenttransaction"},"updateClaimPaymentTransaction()"),Object(s.b)("p",null,"Create a new claim publish request for the passport"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async updateClaimPaymentTransaction(passport, passphrase, id, transactionId, gasTransactionId)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"id")," (string) - the identifier of the claim publish request to update"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"transactionId")," (string) - the bloockchain transaction of the BRDG payment transaction"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"gasTransactionId")," (string) - the blockchain transaction of the gas prepayment transaction (Ethereum only)")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"getclaimpublishtransaction"},"getClaimPublishTransaction()"),Object(s.b)("p",null,"Retrieves the signed transaction of the verified claim to be signed and relayed by the end user for publish (NEO only)"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async getClaimPublishTransaction(passport, passphrase, id)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"id")," (string) - the identifier of the claim publish request to update")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"retry"},"retry()"),Object(s.b)("p",null,"Attempt to (re)process a claim publish request that is waiting for a transaction"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"async retry(passport, passphrase, id)\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passport")," (",Object(s.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"id")," (string) - the identifier of the claim publish request to update")),Object(s.b)("hr",null))}o.isMDXComponent=!0},164:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=n.a.createContext({}),o=function(e){var t=n.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l({},t,{},e)),r},b=function(e){var t=o(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),b=o(r),d=a,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||s;return r?n.a.createElement(m,l({ref:t},c,{components:r})):n.a.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=r[c];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);