(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{132:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return b}));var n=a(1),r=a(6),l=(a(0),a(147)),c={id:"sdk-services-blockchain",title:"Blockchain",sidebar_label:"Blockchain"},i={id:"sdk-services-blockchain",title:"Blockchain",description:"Service to manage all Bridge Passport blockchain interaction with supported blockchains\r",source:"@site/docs\\sdk-services-blockchain.md",permalink:"/docs/sdk-services-blockchain",sidebar_label:"Blockchain",sidebar:"gettingStarted",previous:{title:"Application",permalink:"/docs/sdk-services-application"},next:{title:"Bridge",permalink:"/docs/sdk-services-bridge"}},o=[{value:"Functions",id:"functions",children:[{value:"publishPassport()",id:"publishpassport",children:[]},{value:"getAddressForPassport()",id:"getaddressforpassport",children:[]},{value:"getPassportForAddress()",id:"getpassportforaddress",children:[]},{value:"unpublishPassport()",id:"unpublishpassport",children:[]},{value:"getBalances()",id:"getbalances",children:[]},{value:"getRecentTransactions()",id:"getrecenttransactions",children:[]},{value:"sendPayment()",id:"sendpayment",children:[]},{value:"verifyPayment()",id:"verifypayment",children:[]},{value:"getOracleGasPrice()",id:"getoraclegasprice",children:[]},{value:"transferGas()",id:"transfergas",children:[]},{value:"verifyGasTransfer()",id:"verifygastransfer",children:[]},{value:"getTransactionStatus()",id:"gettransactionstatus",children:[]},{value:"pollTransactionComplete()",id:"polltransactioncomplete",children:[]},{value:"addClaim()",id:"addclaim",children:[]},{value:"removeClaim()",id:"removeclaim",children:[]},{value:"getClaim()",id:"getclaim",children:[]},{value:"sendSwapRequest()",id:"sendswaprequest",children:[]}]}],s={rightToc:o};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Service to manage all Bridge Passport blockchain interaction with supported blockchains"),Object(l.b)("h2",{id:"functions"},"Functions"),Object(l.b)("h3",{id:"publishpassport"},"publishPassport()"),Object(l.b)("p",null,"Publish the passport and wallet address combination to the blockhain using the Bridge Keyserver contract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async publishPassport(wallet, passport, costOnly)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wallet")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to use for publishing"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"passport")," (",Object(l.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport to publish"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"costOnly")," (bool) - if true, the estimated transaction cost is returned and the transaction is not relayed")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"getaddressforpassport"},"getAddressForPassport()"),Object(l.b)("p",null,"Retrieve the published blockchain address for the specified passport from the Bridge Keyserver contract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async getAddressForPassport(network, passportId)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to retrieve the address from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"passportId")," (string) - the passport id of the passport to retrieve the address for")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"getpassportforaddress"},"getPassportForAddress()"),Object(l.b)("p",null,"Retrieve the published passport id for the wallet blockchain address from the Bridge Keyserver contract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async getPassportForAddress(network, address)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to retrieve the passport id from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"address")," (string) - the blockchain address to retrieve the passport id for")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"unpublishpassport"},"unpublishPassport()"),Object(l.b)("p",null,"Unpublish the passport and wallet address combination from the blockchain using the Bridge Keyserver contract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async unpublishPassport(passport, wallet, costOnly)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"passport")," (",Object(l.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport to publish"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wallet")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to use for publishing"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"costOnly")," (bool) - if true, the estimated transaction cost is returned and the transaction is not relayed")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"getbalances"},"getBalances()"),Object(l.b)("p",null,"Retrieve BRDG token and related blockchain gas balances"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async getBalances(network, address)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to retrieve balances from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"address")," (string) - the blockchain address to retrieve the balances for")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"getrecenttransactions"},"getRecentTransactions()"),Object(l.b)("p",null,"Retrieve recent BRDG token blockchain transactions"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async getRecentTransactions(network, address) \n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to retrieve the transactions from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"address")," (string) - the blockchain address to retrieve the transactions for")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"sendpayment"},"sendPayment()"),Object(l.b)("p",null,"Send a BRDG token payment transaction"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async sendPayment(wallet, amount, recipient, paymentIdentifier, wait, costOnly)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wallet")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to send payment from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"amount")," (decimal) - the amount of BRDG to send"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"recipient")," (string) - the blockchain address to send payment to"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"paymentIdentifier")," (string) - the unique identifier of the payment"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wait")," (bool) - whether or not to poll and wait for completion or immediately return the transmitted blockchain transaction id without waiting for completion"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"costOnly")," (bool) - if true, the estimated transaction cost is returned and the transaction is not relayed")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"verifypayment"},"verifyPayment()"),Object(l.b)("p",null,"Verify a BRDG token payment transaction info"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async verifyPayment(network, hash, from, to, amount, paymentIdentifier)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to verify the payment from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"hash")," (string) - the unique blockchain hash / transaction identifier"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"from")," (string) - the address the payment was sent from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"to")," (string) - the address the payment was sent to"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"amount")," (decimal) - the amount of BRDG that was sent"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"paymentIdentifier")," (string) - the unique identifier of the payment")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"getoraclegasprice"},"getOracleGasPrice()"),Object(l.b)("p",null,"Retrieves the current oracle recommended gas price for the blockchain"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async getOracleGasPrice(network)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to get the price for")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"transfergas"},"transferGas()"),Object(l.b)("p",null,"Send a blockchain gas transfer transaction"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async transferGas(wallet, amount, recipient, paymentIdentifier, wait, costOnly)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wallet")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to send payment from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"amount")," (decimal) - the amount of BRDG to send"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"recipient")," (string) - the blockchain address to send payment to"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"paymentIdentifier")," (string) - the unique identifier of the payment"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wait")," (bool) - whether or not to poll and wait for completion or immediately return the transmitted blockchain transaction id without waiting for completion"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"costOnly")," (bool) - if true, the estimated transaction cost is returned and the transaction is not relayed")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"verifygastransfer"},"verifyGasTransfer()"),Object(l.b)("p",null,"Verify a blockchain gas transfer transaction"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async verifyGasTransfer(network, hash, from, to, amount, paymentIdentifier)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to verify the payment from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"hash")," (string) - the unique blockchain hash / transaction identifier"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"from")," (string) - the address the payment was sent from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"to")," (string) - the address the payment was sent to"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"amount")," (decimal) - the amount of BRDG that was sent"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"paymentIdentifier")," (string) - the unique identifier of the payment")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"gettransactionstatus"},"getTransactionStatus()"),Object(l.b)("p",null,"Retrieves the completion and success status of a blockchain transaction"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async getTransactionStatus(network, hash)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to verify the payment from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"hash")," (string) - the unique blockchain hash / transaction identifier")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"polltransactioncomplete"},"pollTransactionComplete()"),Object(l.b)("p",null,"Polls for the status for a blockchain transaction"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async pollTransactionComplete(network, txid)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network of the transaction"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"txid")," (string) - the blockchain transaction id to poll")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"addclaim"},"addClaim()"),Object(l.b)("p",null,"Publish a Bridge Verified claim to the blockhain using the Bridge Keyserver contract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async addClaim(passport, password, wallet, claim, hashOnly, costOnly) \n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"passport")," (",Object(l.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport publishing the claim for Bridge Network API authentication"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"password")," (string) - the password to unlock the private key of the passport adding the claim"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wallet")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to use for adding the claim"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"hashOnly")," (bool) - whether or not to publish a SHA256 hash representing the claim value instead of the actual claim value"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"costOnly")," (bool) - if true, the estimated transaction cost is returned and the transaction is not relayed")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"removeclaim"},"removeClaim()"),Object(l.b)("p",null,"Unpublish a Bridge Verified claim to the blockhain using the Bridge Keyserver contract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async removeClaim(wallet, claimTypeId, costOnly)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"wallet")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to remove the claim from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"claimtypeId")," (string) - the claim type to remove"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"costOnly")," (bool) - if true, the estimated transaction cost is returned and the transaction is not relayed")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"getclaim"},"getClaim()"),Object(l.b)("p",null,"Retrieve a published Bridge Verified claim from the blockhain using the Bridge Keyserver contract"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async getClaim(network, claimTypeId, address) \n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to retrieve the claim from"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"claimtypeId")," (string) - the claim type to retrieve"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"address")," (string) - the blockchain address to retrieve the claim for")),Object(l.b)("h3",{id:"sendswaprequest"},"sendSwapRequest()"),Object(l.b)("p",null,"Send a blockhain transaction request to swap BRDG across blockchain networks"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"async sendSwapRequest(walletFrom, walletTo, amount, costOnly)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"walletFrom")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to send the BRDG from for swap"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"walletTo")," (",Object(l.b)("a",{href:"sdk-models-wallet"},"Wallet"),") - blockchain wallet to receive the BRDG swap"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"amount")," (decimal) - the amount of BRDG to send"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"costOnly")," (bool) - if true, the estimated transaction cost is returned and the transaction is not relayed")),Object(l.b)("hr",null))}b.isMDXComponent=!0},147:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=b(a),u=n,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||l;return a?r.a.createElement(m,i({ref:t},s,{components:a})):r.a.createElement(m,i({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,c=new Array(l);c[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<l;s++)c[s]=a[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);